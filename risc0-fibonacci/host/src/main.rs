// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{FIBONACCI_GUEST_ELF, FIBONACCI_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let fib_steps: u32 = 10;
    let env = ExecutorEnv::builder()
        .write(&fib_steps)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, FIBONACCI_GUEST_ELF).unwrap();
    let n_fib: u32 = receipt.journal.decode().unwrap();

    println!(
        "Proof of guest execution generated. The {}-th fibonacci number is: {}",
        fib_steps, n_fib
    );

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(FIBONACCI_GUEST_ID).unwrap();
}
